{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "eed6c371",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-21T18:36:54.623642Z",
     "iopub.status.busy": "2024-08-21T18:36:54.623178Z",
     "iopub.status.idle": "2024-08-21T18:36:55.477996Z",
     "shell.execute_reply": "2024-08-21T18:36:55.476896Z"
    },
    "papermill": {
     "duration": 0.873927,
     "end_time": "2024-08-21T18:36:55.481090",
     "exception": false,
     "start_time": "2024-08-21T18:36:54.607163",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-tachygraphy/Tachygraphy_dataset_main.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85b0a0b4",
   "metadata": {
    "papermill": {
     "duration": 0.015228,
     "end_time": "2024-08-21T18:36:55.515526",
     "exception": false,
     "start_time": "2024-08-21T18:36:55.500298",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Text Preprocessing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "23258450",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:36:55.545892Z",
     "iopub.status.busy": "2024-08-21T18:36:55.545028Z",
     "iopub.status.idle": "2024-08-21T18:36:55.549839Z",
     "shell.execute_reply": "2024-08-21T18:36:55.548860Z"
    },
    "papermill": {
     "duration": 0.023242,
     "end_time": "2024-08-21T18:36:55.551876",
     "exception": false,
     "start_time": "2024-08-21T18:36:55.528634",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "29c08454",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:36:55.581102Z",
     "iopub.status.busy": "2024-08-21T18:36:55.579838Z",
     "iopub.status.idle": "2024-08-21T18:36:55.634792Z",
     "shell.execute_reply": "2024-08-21T18:36:55.633765Z"
    },
    "papermill": {
     "duration": 0.072914,
     "end_time": "2024-08-21T18:36:55.637352",
     "exception": false,
     "start_time": "2024-08-21T18:36:55.564438",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4958, 3)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv(\"/kaggle/input/dataset-tachygraphy/Tachygraphy_dataset_main.csv\")\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2d80bf01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:36:55.667746Z",
     "iopub.status.busy": "2024-08-21T18:36:55.667364Z",
     "iopub.status.idle": "2024-08-21T18:36:55.685558Z",
     "shell.execute_reply": "2024-08-21T18:36:55.684500Z"
    },
    "papermill": {
     "duration": 0.035605,
     "end_time": "2024-08-21T18:36:55.688108",
     "exception": false,
     "start_time": "2024-08-21T18:36:55.652503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Text</th>\n",
       "      <th>Meaning</th>\n",
       "      <th>Sentiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Last session of the day http://twitpic.com/67ezh</td>\n",
       "      <td>Last session of the day http://twitpic.com/67ezh</td>\n",
       "      <td>neutral</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Shanghai is also really exciting (precisely --...</td>\n",
       "      <td>Shanghai is also really exciting (precisely --...</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>submit the report ASAP!</td>\n",
       "      <td>submit the report as soon as possilbe</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>happy bday!</td>\n",
       "      <td>Happy Birthday!</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>The OGs - I like it!!</td>\n",
       "      <td>The original gangsters - i like it!</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                Text  \\\n",
       "0   Last session of the day http://twitpic.com/67ezh   \n",
       "1  Shanghai is also really exciting (precisely --...   \n",
       "2                            submit the report ASAP!   \n",
       "3                                        happy bday!   \n",
       "4                              The OGs - I like it!!   \n",
       "\n",
       "                                             Meaning Sentiment  \n",
       "0   Last session of the day http://twitpic.com/67ezh   neutral  \n",
       "1  Shanghai is also really exciting (precisely --...  positive  \n",
       "2              submit the report as soon as possilbe  negative  \n",
       "3                                    Happy Birthday!  positive  \n",
       "4                The original gangsters - i like it!  positive  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "126bdcc9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:36:55.717334Z",
     "iopub.status.busy": "2024-08-21T18:36:55.716979Z",
     "iopub.status.idle": "2024-08-21T18:36:55.742446Z",
     "shell.execute_reply": "2024-08-21T18:36:55.741465Z"
    },
    "papermill": {
     "duration": 0.042061,
     "end_time": "2024-08-21T18:36:55.744669",
     "exception": false,
     "start_time": "2024-08-21T18:36:55.702608",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "class\n",
       "neutral     1743\n",
       "positive    1643\n",
       "negative    1572\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=df.drop('Meaning',axis=1)\n",
    "df = df.rename(columns={'Text': 'tweet'})\n",
    "df = df.rename(columns={'Sentiment': 'class'})\n",
    "df['class'] = df['class'].str.lower()\n",
    "sentiment_counts = df['class'].value_counts()\n",
    "sentiment_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "81f19f68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:36:55.773097Z",
     "iopub.status.busy": "2024-08-21T18:36:55.772697Z",
     "iopub.status.idle": "2024-08-21T18:36:55.783512Z",
     "shell.execute_reply": "2024-08-21T18:36:55.782460Z"
    },
    "papermill": {
     "duration": 0.028208,
     "end_time": "2024-08-21T18:36:55.786037",
     "exception": false,
     "start_time": "2024-08-21T18:36:55.757829",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tweet    1\n",
       "class    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4b4cd235",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:36:55.816931Z",
     "iopub.status.busy": "2024-08-21T18:36:55.816564Z",
     "iopub.status.idle": "2024-08-21T18:36:55.824025Z",
     "shell.execute_reply": "2024-08-21T18:36:55.823054Z"
    },
    "papermill": {
     "duration": 0.024639,
     "end_time": "2024-08-21T18:36:55.826239",
     "exception": false,
     "start_time": "2024-08-21T18:36:55.801600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df=df.fillna('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c71c5104",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:36:55.855797Z",
     "iopub.status.busy": "2024-08-21T18:36:55.855440Z",
     "iopub.status.idle": "2024-08-21T18:36:56.056499Z",
     "shell.execute_reply": "2024-08-21T18:36:56.055508Z"
    },
    "papermill": {
     "duration": 0.218438,
     "end_time": "2024-08-21T18:36:56.059126",
     "exception": false,
     "start_time": "2024-08-21T18:36:55.840688",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import re\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "def text_cleaning(text):\n",
    "    text = str(text)\n",
    "    soup = BeautifulSoup(text, \"html.parser\")    ###removing html tages\n",
    "    text = re.sub(r'\\[[^]]*\\]', '', soup.get_text())      ##removing text within square brackets\n",
    "    pattern = r\"[^a-zA-Z0-9\\s,']\"                  # Removing unwanted characters\n",
    "    text = re.sub(pattern, '', text)\n",
    "    url_pattern = r'http\\S+|www\\S+'            ###removing urls\n",
    "    text = re.sub(url_pattern, '', text)\n",
    "    return text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "552ed2e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:36:56.089138Z",
     "iopub.status.busy": "2024-08-21T18:36:56.088645Z",
     "iopub.status.idle": "2024-08-21T18:36:56.422909Z",
     "shell.execute_reply": "2024-08-21T18:36:56.421932Z"
    },
    "papermill": {
     "duration": 0.35246,
     "end_time": "2024-08-21T18:36:56.425738",
     "exception": false,
     "start_time": "2024-08-21T18:36:56.073278",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/2827669698.py:6: MarkupResemblesLocatorWarning: The input looks more like a filename than markup. You may want to open this file and pass the filehandle into Beautiful Soup.\n",
      "  soup = BeautifulSoup(text, \"html.parser\")    ###removing html tages\n"
     ]
    }
   ],
   "source": [
    "df['tweet']=df['tweet'].apply(text_cleaning).tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c90b9b0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:36:56.456535Z",
     "iopub.status.busy": "2024-08-21T18:36:56.456169Z",
     "iopub.status.idle": "2024-08-21T18:37:10.067074Z",
     "shell.execute_reply": "2024-08-21T18:37:10.065950Z"
    },
    "papermill": {
     "duration": 13.628224,
     "end_time": "2024-08-21T18:37:10.069773",
     "exception": false,
     "start_time": "2024-08-21T18:36:56.441549",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-21 18:36:59.385272: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-08-21 18:36:59.385390: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-08-21 18:36:59.510329: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Embedding, LSTM, SpatialDropout1D\n",
    "from sklearn.model_selection import train_test_split\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "60df255f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:37:10.106336Z",
     "iopub.status.busy": "2024-08-21T18:37:10.105589Z",
     "iopub.status.idle": "2024-08-21T18:37:10.140842Z",
     "shell.execute_reply": "2024-08-21T18:37:10.139799Z"
    },
    "papermill": {
     "duration": 0.055554,
     "end_time": "2024-08-21T18:37:10.143575",
     "exception": false,
     "start_time": "2024-08-21T18:37:10.088021",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.utils import to_categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "27184add",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:37:10.174867Z",
     "iopub.status.busy": "2024-08-21T18:37:10.173919Z",
     "iopub.status.idle": "2024-08-21T18:37:10.179663Z",
     "shell.execute_reply": "2024-08-21T18:37:10.178608Z"
    },
    "papermill": {
     "duration": 0.023877,
     "end_time": "2024-08-21T18:37:10.182072",
     "exception": false,
     "start_time": "2024-08-21T18:37:10.158195",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.utils import to_categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4a574abb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:37:10.213671Z",
     "iopub.status.busy": "2024-08-21T18:37:10.213296Z",
     "iopub.status.idle": "2024-08-21T18:37:10.220387Z",
     "shell.execute_reply": "2024-08-21T18:37:10.219361Z"
    },
    "papermill": {
     "duration": 0.025284,
     "end_time": "2024-08-21T18:37:10.222684",
     "exception": false,
     "start_time": "2024-08-21T18:37:10.197400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('O')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['tweet'].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "af58241d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:37:10.252319Z",
     "iopub.status.busy": "2024-08-21T18:37:10.251990Z",
     "iopub.status.idle": "2024-08-21T18:37:10.258496Z",
     "shell.execute_reply": "2024-08-21T18:37:10.257517Z"
    },
    "papermill": {
     "duration": 0.023711,
     "end_time": "2024-08-21T18:37:10.260593",
     "exception": false,
     "start_time": "2024-08-21T18:37:10.236882",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('O')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['class'].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7b09f801",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:37:10.291104Z",
     "iopub.status.busy": "2024-08-21T18:37:10.290122Z",
     "iopub.status.idle": "2024-08-21T18:37:10.301302Z",
     "shell.execute_reply": "2024-08-21T18:37:10.300203Z"
    },
    "papermill": {
     "duration": 0.028796,
     "end_time": "2024-08-21T18:37:10.303499",
     "exception": false,
     "start_time": "2024-08-21T18:37:10.274703",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4948</th>\n",
       "      <td>time flies by when you're facetiming the bae</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4949</th>\n",
       "      <td>U dont know how I feel about this</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4950</th>\n",
       "      <td>come to my job I'll give you a baconator lol</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4951</th>\n",
       "      <td>Rihanna just made Maya Angelou her avi  you're...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4952</th>\n",
       "      <td>im the lil bitch in the theaters tryna hold ba...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4953</th>\n",
       "      <td>make a pet face  wtf wrong with me tonight haha</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4954</th>\n",
       "      <td>I dnt care anymore  Boyz ain't worth d drama</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4955</th>\n",
       "      <td>No relationship is perfect tho me bae goo from...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4956</th>\n",
       "      <td>Over here tryna get my nail polishes and shit lol</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4957</th>\n",
       "      <td>No one was loved d way i luv U</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  tweet     class\n",
       "4948       time flies by when you're facetiming the bae  positive\n",
       "4949                  U dont know how I feel about this  negative\n",
       "4950       come to my job I'll give you a baconator lol  positive\n",
       "4951  Rihanna just made Maya Angelou her avi  you're...  negative\n",
       "4952  im the lil bitch in the theaters tryna hold ba...  negative\n",
       "4953    make a pet face  wtf wrong with me tonight haha  negative\n",
       "4954      I dnt care anymore  Boyz ain't worth d drama   negative\n",
       "4955  No relationship is perfect tho me bae goo from...  negative\n",
       "4956  Over here tryna get my nail polishes and shit lol  negative\n",
       "4957                     No one was loved d way i luv U  positive"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8e58bbcf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:37:10.334547Z",
     "iopub.status.busy": "2024-08-21T18:37:10.334145Z",
     "iopub.status.idle": "2024-08-21T18:37:10.957084Z",
     "shell.execute_reply": "2024-08-21T18:37:10.955974Z"
    },
    "papermill": {
     "duration": 0.64179,
     "end_time": "2024-08-21T18:37:10.959909",
     "exception": false,
     "start_time": "2024-08-21T18:37:10.318119",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3286\n",
      "3144\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/1180210649.py:8: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  row[0] = row[0].replace('rt',' ')\n",
      "/tmp/ipykernel_24/1180210649.py:8: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`\n",
      "  row[0] = row[0].replace('rt',' ')\n"
     ]
    }
   ],
   "source": [
    "df = df[df['class'] != \"neutral\"]  ###droping neutral columns\n",
    "df['tweet'] = df['tweet'].apply(lambda x: x.lower())\n",
    "\n",
    "print(df[ df['class'] == 'positive'].size)\n",
    "print(df[ df['class'] == 'negative'].size)\n",
    "\n",
    "for idx,row in df.iterrows():\n",
    "    row[0] = row[0].replace('rt',' ')\n",
    "    \n",
    "max_fatures = 2000\n",
    "tokenizer = Tokenizer(num_words=max_fatures, split=' ')\n",
    "tokenizer.fit_on_texts(df['tweet'].values)\n",
    "X = tokenizer.texts_to_sequences(df['tweet'].values)\n",
    "X = pad_sequences(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "913f6bd7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:37:10.991906Z",
     "iopub.status.busy": "2024-08-21T18:37:10.991525Z",
     "iopub.status.idle": "2024-08-21T18:37:11.235879Z",
     "shell.execute_reply": "2024-08-21T18:37:11.234966Z"
    },
    "papermill": {
     "duration": 0.263149,
     "end_time": "2024-08-21T18:37:11.238587",
     "exception": false,
     "start_time": "2024-08-21T18:37:10.975438",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Embedding, SpatialDropout1D, LSTM, Dense, Dropout, Bidirectional\n",
    "from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from tensorflow.keras.regularizers import l2\n",
    "from tensorflow.keras.layers import Embedding\n",
    "from tensorflow.keras.initializers import Constant\n",
    "from tensorflow.keras.optimizers import RMSprop\n",
    "from keras_tuner import RandomSearch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d0b74f79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:37:11.270316Z",
     "iopub.status.busy": "2024-08-21T18:37:11.269894Z",
     "iopub.status.idle": "2024-08-21T18:40:15.184502Z",
     "shell.execute_reply": "2024-08-21T18:40:15.183331Z"
    },
    "papermill": {
     "duration": 183.933341,
     "end_time": "2024-08-21T18:40:15.187134",
     "exception": false,
     "start_time": "2024-08-21T18:37:11.253793",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n",
      "  pid, fd = os.forkpty()\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2024-08-21 18:37:12--  http://nlp.stanford.edu/data/glove.6B.zip\r\n",
      "Resolving nlp.stanford.edu (nlp.stanford.edu)... 171.64.67.140\r\n",
      "Connecting to nlp.stanford.edu (nlp.stanford.edu)|171.64.67.140|:80... connected.\r\n",
      "HTTP request sent, awaiting response... 302 Found\r\n",
      "Location: https://nlp.stanford.edu/data/glove.6B.zip [following]\r\n",
      "--2024-08-21 18:37:12--  https://nlp.stanford.edu/data/glove.6B.zip\r\n",
      "Connecting to nlp.stanford.edu (nlp.stanford.edu)|171.64.67.140|:443... connected.\r\n",
      "HTTP request sent, awaiting response... 301 Moved Permanently\r\n",
      "Location: https://downloads.cs.stanford.edu/nlp/data/glove.6B.zip [following]\r\n",
      "--2024-08-21 18:37:12--  https://downloads.cs.stanford.edu/nlp/data/glove.6B.zip\r\n",
      "Resolving downloads.cs.stanford.edu (downloads.cs.stanford.edu)... 171.64.64.22\r\n",
      "Connecting to downloads.cs.stanford.edu (downloads.cs.stanford.edu)|171.64.64.22|:443... connected.\r\n",
      "HTTP request sent, awaiting response... 200 OK\r\n",
      "Length: 862182613 (822M) [application/zip]\r\n",
      "Saving to: 'glove.6B.zip'\r\n",
      "\r\n",
      "glove.6B.zip        100%[===================>] 822.24M  5.01MB/s    in 2m 38s  \r\n",
      "\r\n",
      "2024-08-21 18:39:51 (5.19 MB/s) - 'glove.6B.zip' saved [862182613/862182613]\r\n",
      "\r\n",
      "Archive:  glove.6B.zip\r\n",
      "  inflating: glove.6B.50d.txt        \r\n",
      "  inflating: glove.6B.100d.txt       \r\n",
      "  inflating: glove.6B.200d.txt       \r\n",
      "  inflating: glove.6B.300d.txt       \r\n"
     ]
    }
   ],
   "source": [
    "!wget http://nlp.stanford.edu/data/glove.6B.zip\n",
    "!unzip glove.6B.zip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "448497f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:40:15.358602Z",
     "iopub.status.busy": "2024-08-21T18:40:15.357680Z",
     "iopub.status.idle": "2024-08-21T18:40:28.588667Z",
     "shell.execute_reply": "2024-08-21T18:40:28.587424Z"
    },
    "papermill": {
     "duration": 13.322222,
     "end_time": "2024-08-21T18:40:28.592221",
     "exception": false,
     "start_time": "2024-08-21T18:40:15.269999",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "embedding_index = {}\n",
    "with open('glove.6B.100d.txt', encoding='utf-8') as f:\n",
    "    for line in f:\n",
    "        values = line.split()\n",
    "        word = values[0]\n",
    "        coefs = np.asarray(values[1:], dtype='float32')\n",
    "        embedding_index[word] = coefs\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c39b65ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:40:28.785755Z",
     "iopub.status.busy": "2024-08-21T18:40:28.784987Z",
     "iopub.status.idle": "2024-08-21T18:40:28.789733Z",
     "shell.execute_reply": "2024-08-21T18:40:28.788677Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.093877,
     "end_time": "2024-08-21T18:40:28.791949",
     "exception": false,
     "start_time": "2024-08-21T18:40:28.698072",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# max_features = 5000  \n",
    "# embed_dim = 128 \n",
    "# lstm_out = 64  \n",
    "# batch_size = 32\n",
    "# epochs = 20\n",
    "# learning_rate = 0.001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "be25a564",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:40:28.965263Z",
     "iopub.status.busy": "2024-08-21T18:40:28.964867Z",
     "iopub.status.idle": "2024-08-21T18:40:28.970104Z",
     "shell.execute_reply": "2024-08-21T18:40:28.969030Z"
    },
    "papermill": {
     "duration": 0.094967,
     "end_time": "2024-08-21T18:40:28.972301",
     "exception": false,
     "start_time": "2024-08-21T18:40:28.877334",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "max_features = 5000  \n",
    "embed_dim = 128 \n",
    "lstm_out = 64  \n",
    "batch_size = 64\n",
    "epochs = 20\n",
    "initial_learning_rate = 0.0005"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a291644a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:40:29.141805Z",
     "iopub.status.busy": "2024-08-21T18:40:29.141414Z",
     "iopub.status.idle": "2024-08-21T18:40:29.161411Z",
     "shell.execute_reply": "2024-08-21T18:40:29.160564Z"
    },
    "papermill": {
     "duration": 0.10763,
     "end_time": "2024-08-21T18:40:29.163648",
     "exception": false,
     "start_time": "2024-08-21T18:40:29.056018",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "embedding_dim = 100\n",
    "embedding_matrix = np.zeros((max_features, embedding_dim))\n",
    "for word, i in tokenizer.word_index.items():\n",
    "    if i < max_features:\n",
    "        embedding_vector = embedding_index.get(word)\n",
    "        if embedding_vector is not None:\n",
    "            embedding_matrix[i] = embedding_vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "25404515",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:40:29.333768Z",
     "iopub.status.busy": "2024-08-21T18:40:29.333350Z",
     "iopub.status.idle": "2024-08-21T18:40:29.339031Z",
     "shell.execute_reply": "2024-08-21T18:40:29.337986Z"
    },
    "papermill": {
     "duration": 0.094389,
     "end_time": "2024-08-21T18:40:29.341145",
     "exception": false,
     "start_time": "2024-08-21T18:40:29.246756",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # from tensorflow.keras.models import Sequential\n",
    "# # from tensorflow.keras.layers import Embedding, SpatialDropout1D, LSTM, Dense\n",
    "\n",
    "\n",
    "# # Model\n",
    "# model = Sequential()\n",
    "# model.add(Embedding(max_features, embedding_dim, embeddings_initializer=Constant(embedding_matrix),\n",
    "#                     input_length=X.shape[1], trainable=True))\n",
    "# model.add(SpatialDropout1D(0.3))\n",
    "# model.add(Bidirectional(LSTM(128, return_sequences=True)))\n",
    "# model.add(LSTM(64, dropout=0.4, recurrent_dropout=0.4))\n",
    "# model.add(Dense(64, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.01)))\n",
    "# model.add(Dropout(0.4))\n",
    "# model.add(Dense(2, activation='softmax'))  # Assuming 2 classes for classification\n",
    "\n",
    "# # model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "# # print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "193c6b8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:40:29.515345Z",
     "iopub.status.busy": "2024-08-21T18:40:29.514922Z",
     "iopub.status.idle": "2024-08-21T18:40:29.520695Z",
     "shell.execute_reply": "2024-08-21T18:40:29.519585Z"
    },
    "papermill": {
     "duration": 0.099161,
     "end_time": "2024-08-21T18:40:29.523153",
     "exception": false,
     "start_time": "2024-08-21T18:40:29.423992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tf.random.set_seed(42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "3d4fc950",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:40:29.700738Z",
     "iopub.status.busy": "2024-08-21T18:40:29.699785Z",
     "iopub.status.idle": "2024-08-21T18:40:29.704725Z",
     "shell.execute_reply": "2024-08-21T18:40:29.703558Z"
    },
    "papermill": {
     "duration": 0.096261,
     "end_time": "2024-08-21T18:40:29.707153",
     "exception": false,
     "start_time": "2024-08-21T18:40:29.610892",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# optimizer = Adam(learning_rate=initial_learning_rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "bea7ed57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:40:29.882676Z",
     "iopub.status.busy": "2024-08-21T18:40:29.882293Z",
     "iopub.status.idle": "2024-08-21T18:40:29.886818Z",
     "shell.execute_reply": "2024-08-21T18:40:29.885825Z"
    },
    "papermill": {
     "duration": 0.094587,
     "end_time": "2024-08-21T18:40:29.889272",
     "exception": false,
     "start_time": "2024-08-21T18:40:29.794685",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# model.compile(loss='categorical_crossentropy', optimizer=RMSprop(learning_rate=0.001), metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f5afb9bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:40:30.068813Z",
     "iopub.status.busy": "2024-08-21T18:40:30.067712Z",
     "iopub.status.idle": "2024-08-21T18:40:30.072983Z",
     "shell.execute_reply": "2024-08-21T18:40:30.071855Z"
    },
    "papermill": {
     "duration": 0.096591,
     "end_time": "2024-08-21T18:40:30.075464",
     "exception": false,
     "start_time": "2024-08-21T18:40:29.978873",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "7c03c4d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:40:30.251449Z",
     "iopub.status.busy": "2024-08-21T18:40:30.250735Z",
     "iopub.status.idle": "2024-08-21T18:40:30.255862Z",
     "shell.execute_reply": "2024-08-21T18:40:30.254804Z"
    },
    "papermill": {
     "duration": 0.095917,
     "end_time": "2024-08-21T18:40:30.258283",
     "exception": false,
     "start_time": "2024-08-21T18:40:30.162366",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# early_stopping = EarlyStopping(monitor='val_loss', patience=5, verbose=1, restore_best_weights=True)\n",
    "# reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=2, min_lr=0.00001, verbose=1)\n",
    "# model_checkpoint = ModelCheckpoint('best_model.keras', save_best_only=True, monitor='val_loss', mode='min')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e153269d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:40:30.436662Z",
     "iopub.status.busy": "2024-08-21T18:40:30.436197Z",
     "iopub.status.idle": "2024-08-21T18:40:30.452362Z",
     "shell.execute_reply": "2024-08-21T18:40:30.450749Z"
    },
    "papermill": {
     "duration": 0.106875,
     "end_time": "2024-08-21T18:40:30.454745",
     "exception": false,
     "start_time": "2024-08-21T18:40:30.347870",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2572, 29) (2572, 2)\n",
      "(643, 29) (643, 2)\n"
     ]
    }
   ],
   "source": [
    "Y = pd.get_dummies(df['class']).values\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, random_state = 42)\n",
    "print(X_train.shape,Y_train.shape)\n",
    "print(X_test.shape,Y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e497d570",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:40:30.632686Z",
     "iopub.status.busy": "2024-08-21T18:40:30.632279Z",
     "iopub.status.idle": "2024-08-21T18:40:30.638352Z",
     "shell.execute_reply": "2024-08-21T18:40:30.637016Z"
    },
    "papermill": {
     "duration": 0.098388,
     "end_time": "2024-08-21T18:40:30.640740",
     "exception": false,
     "start_time": "2024-08-21T18:40:30.542352",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "validation_size = 500\n",
    "\n",
    "X_validate = X_test[-validation_size:]\n",
    "Y_validate = Y_test[-validation_size:]\n",
    "X_test = X_test[:-validation_size]\n",
    "Y_test = Y_test[:-validation_size]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "56bae13d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:40:30.816213Z",
     "iopub.status.busy": "2024-08-21T18:40:30.815826Z",
     "iopub.status.idle": "2024-08-21T18:40:30.827845Z",
     "shell.execute_reply": "2024-08-21T18:40:30.826711Z"
    },
    "papermill": {
     "duration": 0.102813,
     "end_time": "2024-08-21T18:40:30.830018",
     "exception": false,
     "start_time": "2024-08-21T18:40:30.727205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define the hyperparameter tuning function\n",
    "def build_model(hp):\n",
    "    model = Sequential()\n",
    "\n",
    "    # Embedding Layer\n",
    "    model.add(Embedding(input_dim=max_features, \n",
    "                        output_dim=embedding_dim, \n",
    "                        input_length=X_train.shape[1]))\n",
    "\n",
    "    # Spatial Dropout (to prevent overfitting)\n",
    "    model.add(SpatialDropout1D(hp.Float('dropout_rate', min_value=0.2, max_value=0.5, step=0.1)))\n",
    "\n",
    "    # Bidirectional LSTM Layer\n",
    "    model.add(Bidirectional(LSTM(units=hp.Int('lstm_units', min_value=64, max_value=128, step=32), \n",
    "                                 return_sequences=True)))\n",
    "\n",
    "    # LSTM Layer with dropout\n",
    "    model.add(LSTM(units=hp.Int('lstm_units', min_value=64, max_value=128, step=32),\n",
    "                   dropout=hp.Float('dropout_rate', min_value=0.2, max_value=0.5, step=0.1), \n",
    "                   recurrent_dropout=0.2))\n",
    "\n",
    "    # Dense Layer with dropout\n",
    "    model.add(Dense(units=hp.Int('dense_units', min_value=32, max_value=128, step=32), activation='relu'))\n",
    "    model.add(Dropout(hp.Float('dropout_rate', min_value=0.2, max_value=0.5, step=0.1)))\n",
    "\n",
    "    # Output Layer\n",
    "    model.add(Dense(2, activation='softmax'))\n",
    "\n",
    "    # Compile the model\n",
    "    model.compile(\n",
    "        optimizer=hp.Choice('optimizer', values=['adam', 'rmsprop']),\n",
    "        loss='categorical_crossentropy',\n",
    "        metrics=['accuracy']\n",
    "    )\n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d40ba2b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:40:31.001228Z",
     "iopub.status.busy": "2024-08-21T18:40:31.000828Z",
     "iopub.status.idle": "2024-08-21T18:40:31.907199Z",
     "shell.execute_reply": "2024-08-21T18:40:31.906113Z"
    },
    "papermill": {
     "duration": 0.996184,
     "end_time": "2024-08-21T18:40:31.909860",
     "exception": false,
     "start_time": "2024-08-21T18:40:30.913676",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "# Instantiate the RandomSearch tuner\n",
    "tuner = RandomSearch(\n",
    "    build_model,\n",
    "    objective='val_accuracy',\n",
    "    max_trials=20,  # Number of different models to try\n",
    "    executions_per_trial=4,  # Number of times to train each model\n",
    "    directory='my_dir',\n",
    "    project_name='lstm_hyperparameter_tuning'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "2c426c48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:40:32.086153Z",
     "iopub.status.busy": "2024-08-21T18:40:32.085278Z",
     "iopub.status.idle": "2024-08-21T18:40:32.091344Z",
     "shell.execute_reply": "2024-08-21T18:40:32.090309Z"
    },
    "papermill": {
     "duration": 0.097737,
     "end_time": "2024-08-21T18:40:32.094716",
     "exception": false,
     "start_time": "2024-08-21T18:40:31.996979",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Search space summary\n",
      "Default search space size: 4\n",
      "dropout_rate (Float)\n",
      "{'default': 0.2, 'conditions': [], 'min_value': 0.2, 'max_value': 0.5, 'step': 0.1, 'sampling': 'linear'}\n",
      "lstm_units (Int)\n",
      "{'default': None, 'conditions': [], 'min_value': 64, 'max_value': 128, 'step': 32, 'sampling': 'linear'}\n",
      "dense_units (Int)\n",
      "{'default': None, 'conditions': [], 'min_value': 32, 'max_value': 128, 'step': 32, 'sampling': 'linear'}\n",
      "optimizer (Choice)\n",
      "{'default': 'adam', 'conditions': [], 'values': ['adam', 'rmsprop'], 'ordered': False}\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Display search space summary\n",
    "tuner.search_space_summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "b61f8706",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:40:32.270303Z",
     "iopub.status.busy": "2024-08-21T18:40:32.269882Z",
     "iopub.status.idle": "2024-08-21T18:40:32.274946Z",
     "shell.execute_reply": "2024-08-21T18:40:32.273915Z"
    },
    "papermill": {
     "duration": 0.095652,
     "end_time": "2024-08-21T18:40:32.277285",
     "exception": false,
     "start_time": "2024-08-21T18:40:32.181633",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# batch_size = 32\n",
    "# model.fit(X_train, Y_train, epochs = 20, batch_size=batch_size, verbose = 2)\n",
    "\n",
    "# Training\n",
    "# history = model.fit(X_train, Y_train,\n",
    "#                     epochs=epochs,\n",
    "#                     batch_size=batch_size,\n",
    "#                     validation_data=(X_test, Y_test),\n",
    "#                     verbose=2,\n",
    "#                     callbacks=[early_stopping, reduce_lr, model_checkpoint])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1e5aef78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T18:40:32.454920Z",
     "iopub.status.busy": "2024-08-21T18:40:32.454541Z",
     "iopub.status.idle": "2024-08-21T19:04:04.335444Z",
     "shell.execute_reply": "2024-08-21T19:04:04.334280Z"
    },
    "papermill": {
     "duration": 1411.970476,
     "end_time": "2024-08-21T19:04:04.337974",
     "exception": false,
     "start_time": "2024-08-21T18:40:32.367498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Trial 20 Complete [00h 01m 17s]\n",
      "val_accuracy: 0.7307692319154739\n",
      "\n",
      "Best val_accuracy So Far: 0.7482517510652542\n",
      "Total elapsed time: 00h 23m 32s\n"
     ]
    }
   ],
   "source": [
    "# Perform hyperparameter tuning\n",
    "tuner.search(X_train, Y_train, \n",
    "             epochs=20, \n",
    "             validation_data=(X_test, Y_test), \n",
    "             batch_size=64, \n",
    "             callbacks=[tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3)])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "144991c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T19:04:04.513756Z",
     "iopub.status.busy": "2024-08-21T19:04:04.513077Z",
     "iopub.status.idle": "2024-08-21T19:04:04.520303Z",
     "shell.execute_reply": "2024-08-21T19:04:04.519023Z"
    },
    "papermill": {
     "duration": 0.097881,
     "end_time": "2024-08-21T19:04:04.523104",
     "exception": false,
     "start_time": "2024-08-21T19:04:04.425223",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "The hyperparameter search is complete. \n",
      "Optimal dropout rate: 0.4\n",
      "Optimal LSTM units: 64\n",
      "Optimal dense layer units: 32\n",
      "Optimal optimizer: adam\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Display best hyperparameters\n",
    "best_hps = tuner.get_best_hyperparameters(num_trials=1)[0]\n",
    "print(f\"\"\"\n",
    "The hyperparameter search is complete. \n",
    "Optimal dropout rate: {best_hps.get('dropout_rate')}\n",
    "Optimal LSTM units: {best_hps.get('lstm_units')}\n",
    "Optimal dense layer units: {best_hps.get('dense_units')}\n",
    "Optimal optimizer: {best_hps.get('optimizer')}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a9af6645",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T19:04:04.697779Z",
     "iopub.status.busy": "2024-08-21T19:04:04.696814Z",
     "iopub.status.idle": "2024-08-21T19:04:20.962616Z",
     "shell.execute_reply": "2024-08-21T19:04:20.961539Z"
    },
    "papermill": {
     "duration": 16.355984,
     "end_time": "2024-08-21T19:04:20.965468",
     "exception": false,
     "start_time": "2024-08-21T19:04:04.609484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 68ms/step - accuracy: 0.5037 - loss: 0.6931 - val_accuracy: 0.4895 - val_loss: 0.6935\n",
      "Epoch 2/20\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - accuracy: 0.5909 - loss: 0.6711 - val_accuracy: 0.6434 - val_loss: 0.6159\n",
      "Epoch 3/20\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 50ms/step - accuracy: 0.7967 - loss: 0.4639 - val_accuracy: 0.6713 - val_loss: 0.7235\n",
      "Epoch 4/20\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 52ms/step - accuracy: 0.8589 - loss: 0.3418 - val_accuracy: 0.7273 - val_loss: 0.6609\n",
      "Epoch 5/20\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 55ms/step - accuracy: 0.8770 - loss: 0.3063 - val_accuracy: 0.7133 - val_loss: 0.8364\n"
     ]
    }
   ],
   "source": [
    "# Build the model with the best hyperparameters\n",
    "model = tuner.hypermodel.build(best_hps)\n",
    "\n",
    "# Train the final model\n",
    "history = model.fit(X_train, Y_train, \n",
    "                    epochs=20, \n",
    "                    validation_data=(X_test, Y_test), \n",
    "                    batch_size=64, \n",
    "                    callbacks=[tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b0b907f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T19:04:21.178200Z",
     "iopub.status.busy": "2024-08-21T19:04:21.177739Z",
     "iopub.status.idle": "2024-08-21T19:04:21.402361Z",
     "shell.execute_reply": "2024-08-21T19:04:21.401037Z"
    },
    "papermill": {
     "duration": 0.33252,
     "end_time": "2024-08-21T19:04:21.404920",
     "exception": false,
     "start_time": "2024-08-21T19:04:21.072400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.7165 - loss: 0.8697\n",
      "Test accuracy: 0.7133\n"
     ]
    }
   ],
   "source": [
    "# Evaluate the model\n",
    "test_loss, test_acc = model.evaluate(X_test, Y_test)\n",
    "print(f\"Test accuracy: {test_acc:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "efe15514",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T19:04:21.610684Z",
     "iopub.status.busy": "2024-08-21T19:04:21.609778Z",
     "iopub.status.idle": "2024-08-21T19:04:21.735875Z",
     "shell.execute_reply": "2024-08-21T19:04:21.734645Z"
    },
    "papermill": {
     "duration": 0.234062,
     "end_time": "2024-08-21T19:04:21.738198",
     "exception": false,
     "start_time": "2024-08-21T19:04:21.504136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3/3 - 0s - 21ms/step - accuracy: 0.7133 - loss: 0.8364\n",
      "loss_score: 0.84\n",
      "accuracy: 0.71\n"
     ]
    }
   ],
   "source": [
    "score,acc = model.evaluate(X_test, Y_test,verbose = 2, batch_size = batch_size)\n",
    "print(\"loss_score: %.2f\" % (score))\n",
    "print(\"accuracy: %.2f\" % (acc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7345e3a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T19:04:21.941758Z",
     "iopub.status.busy": "2024-08-21T19:04:21.940977Z",
     "iopub.status.idle": "2024-08-21T19:04:59.123168Z",
     "shell.execute_reply": "2024-08-21T19:04:59.121922Z"
    },
    "papermill": {
     "duration": 37.286592,
     "end_time": "2024-08-21T19:04:59.125460",
     "exception": false,
     "start_time": "2024-08-21T19:04:21.838868",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 - 0s - 413ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 32ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 32ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 32ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 32ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 40ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 33ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 32ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 34ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 33ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 32ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 34ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 33ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 34ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 32ms/step\n",
      "1/1 - 0s - 33ms/step\n",
      "1/1 - 0s - 40ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 41ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 33ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 32ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 32ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 34ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 52ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 40ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 32ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 40ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 48ms/step\n",
      "1/1 - 0s - 39ms/step\n",
      "1/1 - 0s - 35ms/step\n",
      "1/1 - 0s - 38ms/step\n",
      "1/1 - 0s - 42ms/step\n",
      "1/1 - 0s - 36ms/step\n",
      "1/1 - 0s - 34ms/step\n",
      "1/1 - 0s - 34ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 33ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 32ms/step\n",
      "1/1 - 0s - 34ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 32ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 45ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "pos_acc 79.1044776119403 %\n",
      "neg_acc 75.86206896551724 %\n"
     ]
    }
   ],
   "source": [
    "pos_cnt, neg_cnt, pos_correct, neg_correct = 0, 0, 0, 0\n",
    "for x in range(len(X_validate)):\n",
    "    \n",
    "    result = model.predict(X_validate[x].reshape(1,X_test.shape[1]),batch_size=1,verbose = 2)[0]\n",
    "   \n",
    "    if np.argmax(result) == np.argmax(Y_validate[x]):\n",
    "        if np.argmax(Y_validate[x]) == 0:\n",
    "            neg_correct += 1\n",
    "        else:\n",
    "            pos_correct += 1\n",
    "       \n",
    "    if np.argmax(Y_validate[x]) == 0:\n",
    "        neg_cnt += 1\n",
    "    else:\n",
    "        pos_cnt += 1\n",
    "\n",
    "\n",
    "\n",
    "print(\"pos_acc\", pos_correct/pos_cnt*100, \"%\")\n",
    "print(\"neg_acc\", neg_correct/neg_cnt*100, \"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "11ff8a7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T19:04:59.422701Z",
     "iopub.status.busy": "2024-08-21T19:04:59.421375Z",
     "iopub.status.idle": "2024-08-21T19:04:59.898074Z",
     "shell.execute_reply": "2024-08-21T19:04:59.896878Z"
    },
    "papermill": {
     "duration": 0.627301,
     "end_time": "2024-08-21T19:04:59.900372",
     "exception": false,
     "start_time": "2024-08-21T19:04:59.273071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[   0    0    0    0    0    0    0    1   79  477    7   18  559 1000\n",
      "    39  275   55    7   10 1913    6    5  458  165  118   13    4 1562]]\n",
      "1/1 - 0s - 423ms/step\n",
      "negative\n"
     ]
    }
   ],
   "source": [
    "twt = ['I been told you that yo folks dont care about you . Im starving and my dad deadass didnt make me a plate']\n",
    "twt = tokenizer.texts_to_sequences(twt)\n",
    "twt = pad_sequences(twt, maxlen=28, dtype='int32', value=0)\n",
    "print(twt)\n",
    "sentiment = model.predict(twt,batch_size=1,verbose = 2)[0]\n",
    "if(np.argmax(sentiment) == 0):\n",
    "    print(\"negative\")\n",
    "elif (np.argmax(sentiment) == 1):\n",
    "    print(\"positive\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "02260383",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T19:05:00.252279Z",
     "iopub.status.busy": "2024-08-21T19:05:00.251329Z",
     "iopub.status.idle": "2024-08-21T19:05:00.324566Z",
     "shell.execute_reply": "2024-08-21T19:05:00.323626Z"
    },
    "papermill": {
     "duration": 0.224465,
     "end_time": "2024-08-21T19:05:00.327108",
     "exception": false,
     "start_time": "2024-08-21T19:05:00.102643",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.save('lstm_model.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc3e9c24",
   "metadata": {
    "papermill": {
     "duration": 0.147298,
     "end_time": "2024-08-21T19:05:00.619033",
     "exception": false,
     "start_time": "2024-08-21T19:05:00.471735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 5557640,
     "sourceId": 9193227,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30747,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1692.023394,
   "end_time": "2024-08-21T19:05:03.591823",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-21T18:36:51.568429",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
