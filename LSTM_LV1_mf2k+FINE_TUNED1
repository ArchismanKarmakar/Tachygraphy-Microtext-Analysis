{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6a3815a3",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-21T21:52:50.654563Z",
     "iopub.status.busy": "2024-08-21T21:52:50.654163Z",
     "iopub.status.idle": "2024-08-21T21:52:51.398578Z",
     "shell.execute_reply": "2024-08-21T21:52:51.397522Z"
    },
    "papermill": {
     "duration": 0.760665,
     "end_time": "2024-08-21T21:52:51.400800",
     "exception": false,
     "start_time": "2024-08-21T21:52:50.640135",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-tachygraphy/Tachygraphy_dataset_main.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fd8a0f1",
   "metadata": {
    "papermill": {
     "duration": 0.012223,
     "end_time": "2024-08-21T21:52:51.425542",
     "exception": false,
     "start_time": "2024-08-21T21:52:51.413319",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Text Preprocessing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cbaf1000",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:52:51.450927Z",
     "iopub.status.busy": "2024-08-21T21:52:51.450516Z",
     "iopub.status.idle": "2024-08-21T21:52:51.454769Z",
     "shell.execute_reply": "2024-08-21T21:52:51.453844Z"
    },
    "papermill": {
     "duration": 0.01914,
     "end_time": "2024-08-21T21:52:51.456705",
     "exception": false,
     "start_time": "2024-08-21T21:52:51.437565",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# To ignore warinings\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f54d0e7e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:52:51.483010Z",
     "iopub.status.busy": "2024-08-21T21:52:51.482717Z",
     "iopub.status.idle": "2024-08-21T21:52:51.524583Z",
     "shell.execute_reply": "2024-08-21T21:52:51.523566Z"
    },
    "papermill": {
     "duration": 0.057801,
     "end_time": "2024-08-21T21:52:51.526686",
     "exception": false,
     "start_time": "2024-08-21T21:52:51.468885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4958, 3)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv(\"/kaggle/input/dataset-tachygraphy/Tachygraphy_dataset_main.csv\")\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ea4bd6a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:52:51.554040Z",
     "iopub.status.busy": "2024-08-21T21:52:51.553297Z",
     "iopub.status.idle": "2024-08-21T21:52:51.571148Z",
     "shell.execute_reply": "2024-08-21T21:52:51.570255Z"
    },
    "papermill": {
     "duration": 0.034408,
     "end_time": "2024-08-21T21:52:51.573315",
     "exception": false,
     "start_time": "2024-08-21T21:52:51.538907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Text</th>\n",
       "      <th>Meaning</th>\n",
       "      <th>Sentiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Last session of the day http://twitpic.com/67ezh</td>\n",
       "      <td>Last session of the day http://twitpic.com/67ezh</td>\n",
       "      <td>neutral</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Shanghai is also really exciting (precisely --...</td>\n",
       "      <td>Shanghai is also really exciting (precisely --...</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>submit the report ASAP!</td>\n",
       "      <td>submit the report as soon as possilbe</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>happy bday!</td>\n",
       "      <td>Happy Birthday!</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>The OGs - I like it!!</td>\n",
       "      <td>The original gangsters - i like it!</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                Text  \\\n",
       "0   Last session of the day http://twitpic.com/67ezh   \n",
       "1  Shanghai is also really exciting (precisely --...   \n",
       "2                            submit the report ASAP!   \n",
       "3                                        happy bday!   \n",
       "4                              The OGs - I like it!!   \n",
       "\n",
       "                                             Meaning Sentiment  \n",
       "0   Last session of the day http://twitpic.com/67ezh   neutral  \n",
       "1  Shanghai is also really exciting (precisely --...  positive  \n",
       "2              submit the report as soon as possilbe  negative  \n",
       "3                                    Happy Birthday!  positive  \n",
       "4                The original gangsters - i like it!  positive  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d30bb8be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:52:51.601336Z",
     "iopub.status.busy": "2024-08-21T21:52:51.601048Z",
     "iopub.status.idle": "2024-08-21T21:52:51.623154Z",
     "shell.execute_reply": "2024-08-21T21:52:51.622239Z"
    },
    "papermill": {
     "duration": 0.037972,
     "end_time": "2024-08-21T21:52:51.625308",
     "exception": false,
     "start_time": "2024-08-21T21:52:51.587336",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "class\n",
       "neutral     1743\n",
       "positive    1643\n",
       "negative    1572\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=df.drop('Meaning',axis=1)\n",
    "df = df.rename(columns={'Text': 'tweet'})\n",
    "df = df.rename(columns={'Sentiment': 'class'})\n",
    "df['class'] = df['class'].str.lower()\n",
    "sentiment_counts = df['class'].value_counts()\n",
    "sentiment_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bcfed89a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:52:51.654506Z",
     "iopub.status.busy": "2024-08-21T21:52:51.654200Z",
     "iopub.status.idle": "2024-08-21T21:52:51.663281Z",
     "shell.execute_reply": "2024-08-21T21:52:51.662407Z"
    },
    "papermill": {
     "duration": 0.02633,
     "end_time": "2024-08-21T21:52:51.665423",
     "exception": false,
     "start_time": "2024-08-21T21:52:51.639093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tweet    1\n",
       "class    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "475a1622",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:52:51.692491Z",
     "iopub.status.busy": "2024-08-21T21:52:51.691943Z",
     "iopub.status.idle": "2024-08-21T21:52:51.697945Z",
     "shell.execute_reply": "2024-08-21T21:52:51.697073Z"
    },
    "papermill": {
     "duration": 0.021756,
     "end_time": "2024-08-21T21:52:51.700216",
     "exception": false,
     "start_time": "2024-08-21T21:52:51.678460",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df=df.fillna('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1e192831",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:52:51.728104Z",
     "iopub.status.busy": "2024-08-21T21:52:51.727639Z",
     "iopub.status.idle": "2024-08-21T21:52:51.913580Z",
     "shell.execute_reply": "2024-08-21T21:52:51.912690Z"
    },
    "papermill": {
     "duration": 0.20192,
     "end_time": "2024-08-21T21:52:51.916039",
     "exception": false,
     "start_time": "2024-08-21T21:52:51.714119",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import re\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "def text_cleaning(text):\n",
    "    text = str(text)\n",
    "    soup = BeautifulSoup(text, \"html.parser\")    ###removing html tages\n",
    "    text = re.sub(r'\\[[^]]*\\]', '', soup.get_text())      ##removing text within square brackets\n",
    "    pattern = r\"[^a-zA-Z0-9\\s,']\"                  # Removing unwanted characters\n",
    "    text = re.sub(pattern, '', text)\n",
    "    url_pattern = r'http\\S+|www\\S+'            ###removing urls\n",
    "    text = re.sub(url_pattern, '', text)\n",
    "    return text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "08ac4bff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:52:51.945803Z",
     "iopub.status.busy": "2024-08-21T21:52:51.944964Z",
     "iopub.status.idle": "2024-08-21T21:52:52.236167Z",
     "shell.execute_reply": "2024-08-21T21:52:52.235341Z"
    },
    "papermill": {
     "duration": 0.308497,
     "end_time": "2024-08-21T21:52:52.238602",
     "exception": false,
     "start_time": "2024-08-21T21:52:51.930105",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['tweet']=df['tweet'].apply(text_cleaning).tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1394ee21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:52:52.265467Z",
     "iopub.status.busy": "2024-08-21T21:52:52.265141Z",
     "iopub.status.idle": "2024-08-21T21:53:04.939333Z",
     "shell.execute_reply": "2024-08-21T21:53:04.938497Z"
    },
    "papermill": {
     "duration": 12.689922,
     "end_time": "2024-08-21T21:53:04.941702",
     "exception": false,
     "start_time": "2024-08-21T21:52:52.251780",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-21 21:52:55.120971: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-08-21 21:52:55.121090: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-08-21 21:52:55.249774: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Embedding, LSTM, SpatialDropout1D\n",
    "from sklearn.model_selection import train_test_split\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "007c5ac0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:53:04.968869Z",
     "iopub.status.busy": "2024-08-21T21:53:04.968059Z",
     "iopub.status.idle": "2024-08-21T21:53:04.996864Z",
     "shell.execute_reply": "2024-08-21T21:53:04.996165Z"
    },
    "papermill": {
     "duration": 0.044397,
     "end_time": "2024-08-21T21:53:04.998883",
     "exception": false,
     "start_time": "2024-08-21T21:53:04.954486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.utils import to_categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "af837a42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:53:05.024919Z",
     "iopub.status.busy": "2024-08-21T21:53:05.024669Z",
     "iopub.status.idle": "2024-08-21T21:53:05.028939Z",
     "shell.execute_reply": "2024-08-21T21:53:05.028143Z"
    },
    "papermill": {
     "duration": 0.019209,
     "end_time": "2024-08-21T21:53:05.030828",
     "exception": false,
     "start_time": "2024-08-21T21:53:05.011619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.utils import to_categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "985499c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:53:05.056639Z",
     "iopub.status.busy": "2024-08-21T21:53:05.056348Z",
     "iopub.status.idle": "2024-08-21T21:53:05.062045Z",
     "shell.execute_reply": "2024-08-21T21:53:05.061233Z"
    },
    "papermill": {
     "duration": 0.020806,
     "end_time": "2024-08-21T21:53:05.063843",
     "exception": false,
     "start_time": "2024-08-21T21:53:05.043037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('O')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['tweet'].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "45a5511b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:53:05.089835Z",
     "iopub.status.busy": "2024-08-21T21:53:05.089592Z",
     "iopub.status.idle": "2024-08-21T21:53:05.095161Z",
     "shell.execute_reply": "2024-08-21T21:53:05.094364Z"
    },
    "papermill": {
     "duration": 0.020675,
     "end_time": "2024-08-21T21:53:05.096974",
     "exception": false,
     "start_time": "2024-08-21T21:53:05.076299",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('O')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['class'].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d3167e2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:53:05.123510Z",
     "iopub.status.busy": "2024-08-21T21:53:05.123225Z",
     "iopub.status.idle": "2024-08-21T21:53:05.133000Z",
     "shell.execute_reply": "2024-08-21T21:53:05.132094Z"
    },
    "papermill": {
     "duration": 0.025324,
     "end_time": "2024-08-21T21:53:05.135065",
     "exception": false,
     "start_time": "2024-08-21T21:53:05.109741",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4948</th>\n",
       "      <td>time flies by when you're facetiming the bae</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4949</th>\n",
       "      <td>U dont know how I feel about this</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4950</th>\n",
       "      <td>come to my job I'll give you a baconator lol</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4951</th>\n",
       "      <td>Rihanna just made Maya Angelou her avi  you're...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4952</th>\n",
       "      <td>im the lil bitch in the theaters tryna hold ba...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4953</th>\n",
       "      <td>make a pet face  wtf wrong with me tonight haha</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4954</th>\n",
       "      <td>I dnt care anymore  Boyz ain't worth d drama</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4955</th>\n",
       "      <td>No relationship is perfect tho me bae goo from...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4956</th>\n",
       "      <td>Over here tryna get my nail polishes and shit lol</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4957</th>\n",
       "      <td>No one was loved d way i luv U</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  tweet     class\n",
       "4948       time flies by when you're facetiming the bae  positive\n",
       "4949                  U dont know how I feel about this  negative\n",
       "4950       come to my job I'll give you a baconator lol  positive\n",
       "4951  Rihanna just made Maya Angelou her avi  you're...  negative\n",
       "4952  im the lil bitch in the theaters tryna hold ba...  negative\n",
       "4953    make a pet face  wtf wrong with me tonight haha  negative\n",
       "4954      I dnt care anymore  Boyz ain't worth d drama   negative\n",
       "4955  No relationship is perfect tho me bae goo from...  negative\n",
       "4956  Over here tryna get my nail polishes and shit lol  negative\n",
       "4957                     No one was loved d way i luv U  positive"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1f4c1fd9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:53:05.162292Z",
     "iopub.status.busy": "2024-08-21T21:53:05.162046Z",
     "iopub.status.idle": "2024-08-21T21:53:05.718164Z",
     "shell.execute_reply": "2024-08-21T21:53:05.717378Z"
    },
    "papermill": {
     "duration": 0.57204,
     "end_time": "2024-08-21T21:53:05.720507",
     "exception": false,
     "start_time": "2024-08-21T21:53:05.148467",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3286\n",
      "3144\n"
     ]
    }
   ],
   "source": [
    "df = df[df['class'] != \"neutral\"]  ###droping neutral columns\n",
    "df['tweet'] = df['tweet'].apply(lambda x: x.lower())\n",
    "\n",
    "print(df[ df['class'] == 'positive'].size)\n",
    "print(df[ df['class'] == 'negative'].size)\n",
    "\n",
    "for idx,row in df.iterrows():\n",
    "    row[0] = row[0].replace('rt',' ')\n",
    "    \n",
    "max_fatures = 2000\n",
    "tokenizer = Tokenizer(num_words=max_fatures, split=' ')\n",
    "tokenizer.fit_on_texts(df['tweet'].values)\n",
    "X = tokenizer.texts_to_sequences(df['tweet'].values)\n",
    "X = pad_sequences(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "de02f08a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:53:05.748969Z",
     "iopub.status.busy": "2024-08-21T21:53:05.748296Z",
     "iopub.status.idle": "2024-08-21T21:53:05.980062Z",
     "shell.execute_reply": "2024-08-21T21:53:05.979327Z"
    },
    "papermill": {
     "duration": 0.248364,
     "end_time": "2024-08-21T21:53:05.982298",
     "exception": false,
     "start_time": "2024-08-21T21:53:05.733934",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Embedding, SpatialDropout1D, LSTM, Dense, Dropout, Bidirectional\n",
    "from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from tensorflow.keras.regularizers import l2\n",
    "from tensorflow.keras.layers import Embedding\n",
    "from tensorflow.keras.initializers import Constant\n",
    "from tensorflow.keras.optimizers import RMSprop\n",
    "from keras_tuner import RandomSearch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "943ff92d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:53:06.018442Z",
     "iopub.status.busy": "2024-08-21T21:53:06.017707Z",
     "iopub.status.idle": "2024-08-21T21:56:07.877742Z",
     "shell.execute_reply": "2024-08-21T21:56:07.876522Z"
    },
    "papermill": {
     "duration": 181.884132,
     "end_time": "2024-08-21T21:56:07.880107",
     "exception": false,
     "start_time": "2024-08-21T21:53:05.995975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2024-08-21 21:53:06--  http://nlp.stanford.edu/data/glove.6B.zip\r\n",
      "Resolving nlp.stanford.edu (nlp.stanford.edu)... 171.64.67.140\r\n",
      "Connecting to nlp.stanford.edu (nlp.stanford.edu)|171.64.67.140|:80... connected.\r\n",
      "HTTP request sent, awaiting response... 302 Found\r\n",
      "Location: https://nlp.stanford.edu/data/glove.6B.zip [following]\r\n",
      "--2024-08-21 21:53:07--  https://nlp.stanford.edu/data/glove.6B.zip\r\n",
      "Connecting to nlp.stanford.edu (nlp.stanford.edu)|171.64.67.140|:443... connected.\r\n",
      "HTTP request sent, awaiting response... 301 Moved Permanently\r\n",
      "Location: https://downloads.cs.stanford.edu/nlp/data/glove.6B.zip [following]\r\n",
      "--2024-08-21 21:53:07--  https://downloads.cs.stanford.edu/nlp/data/glove.6B.zip\r\n",
      "Resolving downloads.cs.stanford.edu (downloads.cs.stanford.edu)... 171.64.64.22\r\n",
      "Connecting to downloads.cs.stanford.edu (downloads.cs.stanford.edu)|171.64.64.22|:443... connected.\r\n",
      "HTTP request sent, awaiting response... 200 OK\r\n",
      "Length: 862182613 (822M) [application/zip]\r\n",
      "Saving to: 'glove.6B.zip'\r\n",
      "\r\n",
      "glove.6B.zip        100%[===================>] 822.24M  5.02MB/s    in 2m 39s  \r\n",
      "\r\n",
      "2024-08-21 21:55:46 (5.18 MB/s) - 'glove.6B.zip' saved [862182613/862182613]\r\n",
      "\r\n",
      "Archive:  glove.6B.zip\r\n",
      "  inflating: glove.6B.50d.txt        \r\n",
      "  inflating: glove.6B.100d.txt       \r\n",
      "  inflating: glove.6B.200d.txt       \r\n",
      "  inflating: glove.6B.300d.txt       \r\n"
     ]
    }
   ],
   "source": [
    "!wget http://nlp.stanford.edu/data/glove.6B.zip\n",
    "!unzip glove.6B.zip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "75fbd528",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:56:08.028728Z",
     "iopub.status.busy": "2024-08-21T21:56:08.028374Z",
     "iopub.status.idle": "2024-08-21T21:56:19.957478Z",
     "shell.execute_reply": "2024-08-21T21:56:19.956427Z"
    },
    "papermill": {
     "duration": 12.007103,
     "end_time": "2024-08-21T21:56:19.959894",
     "exception": false,
     "start_time": "2024-08-21T21:56:07.952791",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "embedding_index = {}\n",
    "with open('glove.6B.100d.txt', encoding='utf-8') as f:\n",
    "    for line in f:\n",
    "        values = line.split()\n",
    "        word = values[0]\n",
    "        coefs = np.asarray(values[1:], dtype='float32')\n",
    "        embedding_index[word] = coefs\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1a5c7684",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:56:20.107982Z",
     "iopub.status.busy": "2024-08-21T21:56:20.107646Z",
     "iopub.status.idle": "2024-08-21T21:56:20.111591Z",
     "shell.execute_reply": "2024-08-21T21:56:20.110786Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.080076,
     "end_time": "2024-08-21T21:56:20.113496",
     "exception": false,
     "start_time": "2024-08-21T21:56:20.033420",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# max_features = 5000  \n",
    "# embed_dim = 128 \n",
    "# lstm_out = 64  \n",
    "# batch_size = 32\n",
    "# epochs = 20\n",
    "# learning_rate = 0.001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "528d72db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:56:20.259204Z",
     "iopub.status.busy": "2024-08-21T21:56:20.258913Z",
     "iopub.status.idle": "2024-08-21T21:56:20.263211Z",
     "shell.execute_reply": "2024-08-21T21:56:20.262394Z"
    },
    "papermill": {
     "duration": 0.079636,
     "end_time": "2024-08-21T21:56:20.265256",
     "exception": false,
     "start_time": "2024-08-21T21:56:20.185620",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "max_features = 5000  \n",
    "embed_dim = 128 \n",
    "lstm_out = 64  \n",
    "batch_size = 64\n",
    "epochs = 20\n",
    "initial_learning_rate = 0.0005"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1a2eb870",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:56:20.412500Z",
     "iopub.status.busy": "2024-08-21T21:56:20.412202Z",
     "iopub.status.idle": "2024-08-21T21:56:20.430646Z",
     "shell.execute_reply": "2024-08-21T21:56:20.430024Z"
    },
    "papermill": {
     "duration": 0.093846,
     "end_time": "2024-08-21T21:56:20.432460",
     "exception": false,
     "start_time": "2024-08-21T21:56:20.338614",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "embedding_dim = 100\n",
    "embedding_matrix = np.zeros((max_features, embedding_dim))\n",
    "for word, i in tokenizer.word_index.items():\n",
    "    if i < max_features:\n",
    "        embedding_vector = embedding_index.get(word)\n",
    "        if embedding_vector is not None:\n",
    "            embedding_matrix[i] = embedding_vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "fc133346",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:56:20.577956Z",
     "iopub.status.busy": "2024-08-21T21:56:20.577253Z",
     "iopub.status.idle": "2024-08-21T21:56:20.581876Z",
     "shell.execute_reply": "2024-08-21T21:56:20.581149Z"
    },
    "papermill": {
     "duration": 0.079407,
     "end_time": "2024-08-21T21:56:20.583739",
     "exception": false,
     "start_time": "2024-08-21T21:56:20.504332",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # from tensorflow.keras.models import Sequential\n",
    "# # from tensorflow.keras.layers import Embedding, SpatialDropout1D, LSTM, Dense\n",
    "\n",
    "\n",
    "# # Model\n",
    "# model = Sequential()\n",
    "# model.add(Embedding(max_features, embedding_dim, embeddings_initializer=Constant(embedding_matrix),\n",
    "#                     input_length=X.shape[1], trainable=True))\n",
    "# model.add(SpatialDropout1D(0.3))\n",
    "# model.add(Bidirectional(LSTM(128, return_sequences=True)))\n",
    "# model.add(LSTM(64, dropout=0.4, recurrent_dropout=0.4))\n",
    "# model.add(Dense(64, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.01)))\n",
    "# model.add(Dropout(0.4))\n",
    "# model.add(Dense(2, activation='softmax'))  # Assuming 2 classes for classification\n",
    "\n",
    "# # model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "# # print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c6eeee2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:56:20.730044Z",
     "iopub.status.busy": "2024-08-21T21:56:20.729796Z",
     "iopub.status.idle": "2024-08-21T21:56:20.734048Z",
     "shell.execute_reply": "2024-08-21T21:56:20.733257Z"
    },
    "papermill": {
     "duration": 0.079684,
     "end_time": "2024-08-21T21:56:20.735916",
     "exception": false,
     "start_time": "2024-08-21T21:56:20.656232",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tf.random.set_seed(42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "de2359bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:56:20.881817Z",
     "iopub.status.busy": "2024-08-21T21:56:20.881550Z",
     "iopub.status.idle": "2024-08-21T21:56:20.885227Z",
     "shell.execute_reply": "2024-08-21T21:56:20.884328Z"
    },
    "papermill": {
     "duration": 0.078988,
     "end_time": "2024-08-21T21:56:20.887098",
     "exception": false,
     "start_time": "2024-08-21T21:56:20.808110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# optimizer = Adam(learning_rate=initial_learning_rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "401509d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:56:21.034157Z",
     "iopub.status.busy": "2024-08-21T21:56:21.033859Z",
     "iopub.status.idle": "2024-08-21T21:56:21.037792Z",
     "shell.execute_reply": "2024-08-21T21:56:21.036904Z"
    },
    "papermill": {
     "duration": 0.080937,
     "end_time": "2024-08-21T21:56:21.039789",
     "exception": false,
     "start_time": "2024-08-21T21:56:20.958852",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# model.compile(loss='categorical_crossentropy', optimizer=RMSprop(learning_rate=0.001), metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "673d550d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:56:21.193361Z",
     "iopub.status.busy": "2024-08-21T21:56:21.193067Z",
     "iopub.status.idle": "2024-08-21T21:56:21.196787Z",
     "shell.execute_reply": "2024-08-21T21:56:21.195953Z"
    },
    "papermill": {
     "duration": 0.082085,
     "end_time": "2024-08-21T21:56:21.198848",
     "exception": false,
     "start_time": "2024-08-21T21:56:21.116763",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "04282969",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:56:21.347025Z",
     "iopub.status.busy": "2024-08-21T21:56:21.346774Z",
     "iopub.status.idle": "2024-08-21T21:56:21.350384Z",
     "shell.execute_reply": "2024-08-21T21:56:21.349603Z"
    },
    "papermill": {
     "duration": 0.079699,
     "end_time": "2024-08-21T21:56:21.352197",
     "exception": false,
     "start_time": "2024-08-21T21:56:21.272498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# early_stopping = EarlyStopping(monitor='val_loss', patience=5, verbose=1, restore_best_weights=True)\n",
    "# reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=2, min_lr=0.00001, verbose=1)\n",
    "# model_checkpoint = ModelCheckpoint('best_model.keras', save_best_only=True, monitor='val_loss', mode='min')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "7173c38c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:56:21.499567Z",
     "iopub.status.busy": "2024-08-21T21:56:21.499276Z",
     "iopub.status.idle": "2024-08-21T21:56:21.511855Z",
     "shell.execute_reply": "2024-08-21T21:56:21.510890Z"
    },
    "papermill": {
     "duration": 0.088423,
     "end_time": "2024-08-21T21:56:21.513737",
     "exception": false,
     "start_time": "2024-08-21T21:56:21.425314",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2572, 29) (2572, 2)\n",
      "(643, 29) (643, 2)\n"
     ]
    }
   ],
   "source": [
    "Y = pd.get_dummies(df['class']).values\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, random_state = 42)\n",
    "print(X_train.shape,Y_train.shape)\n",
    "print(X_test.shape,Y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "fc07a380",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:56:21.658941Z",
     "iopub.status.busy": "2024-08-21T21:56:21.658673Z",
     "iopub.status.idle": "2024-08-21T21:56:21.662996Z",
     "shell.execute_reply": "2024-08-21T21:56:21.662204Z"
    },
    "papermill": {
     "duration": 0.07909,
     "end_time": "2024-08-21T21:56:21.664791",
     "exception": false,
     "start_time": "2024-08-21T21:56:21.585701",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "validation_size = 500\n",
    "\n",
    "X_validate = X_test[-validation_size:]\n",
    "Y_validate = Y_test[-validation_size:]\n",
    "X_test = X_test[:-validation_size]\n",
    "Y_test = Y_test[:-validation_size]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "2b5500c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:56:21.812734Z",
     "iopub.status.busy": "2024-08-21T21:56:21.812417Z",
     "iopub.status.idle": "2024-08-21T21:56:21.823345Z",
     "shell.execute_reply": "2024-08-21T21:56:21.822484Z"
    },
    "papermill": {
     "duration": 0.08644,
     "end_time": "2024-08-21T21:56:21.825342",
     "exception": false,
     "start_time": "2024-08-21T21:56:21.738902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define the hyperparameter tuning function\n",
    "def build_model(hp):\n",
    "    model = Sequential()\n",
    "    \n",
    "    # Embedding layer with pre-trained GloVe embeddings\n",
    "    model.add(Embedding(max_features,\n",
    "                        embedding_dim,\n",
    "                        embeddings_initializer=Constant(embedding_matrix),\n",
    "                        input_length=X.shape[1],\n",
    "                        trainable=True))\n",
    "    \n",
    "    # Tuning SpatialDropout1D rate\n",
    "    model.add(SpatialDropout1D(hp.Float('spatial_dropout', min_value=0.1, max_value=0.5, step=0.1)))\n",
    "    \n",
    "    # Bidirectional LSTM layer with tunable units\n",
    "    model.add(Bidirectional(LSTM(units=hp.Int('lstm_units_1', min_value=64, max_value=128, step=32), \n",
    "                                 return_sequences=True)))\n",
    "    \n",
    "    # Second LSTM layer with dropout and recurrent dropout\n",
    "    model.add(LSTM(units=hp.Int('lstm_units_2', min_value=32, max_value=64, step=32),\n",
    "                   dropout=hp.Float('dropout', min_value=0.2, max_value=0.5, step=0.1),\n",
    "                   recurrent_dropout=hp.Float('recurrent_dropout', min_value=0.2, max_value=0.5, step=0.1)))\n",
    "    \n",
    "    # Dense layer with L2 regularization\n",
    "    model.add(Dense(units=hp.Int('dense_units', min_value=32, max_value=64, step=16),\n",
    "                    activation='relu',\n",
    "                    kernel_regularizer=tf.keras.regularizers.l2(0.01)))\n",
    "    \n",
    "    # Dropout layer\n",
    "    model.add(Dropout(hp.Float('dropout_dense', min_value=0.2, max_value=0.5, step=0.1)))\n",
    "    \n",
    "    # Output layer\n",
    "    model.add(Dense(2, activation='softmax'))\n",
    "    \n",
    "    # Compile the model\n",
    "#     model.compile(\n",
    "#         optimizer=hp.Choice('optimizer', values=['adam', 'rmsprop']),\n",
    "#         loss='categorical_crossentropy',\n",
    "#         metrics=['accuracy']\n",
    "#     )\n",
    "    \n",
    "    model.compile(optimizer=tf.keras.optimizers.Adam(hp.Float('learning_rate', min_value=1e-4, max_value=1e-2, sampling='LOG')),\n",
    "                  loss='categorical_crossentropy',\n",
    "                  metrics=['accuracy'])\n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7fb4587f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:56:21.974469Z",
     "iopub.status.busy": "2024-08-21T21:56:21.974152Z",
     "iopub.status.idle": "2024-08-21T21:56:22.804056Z",
     "shell.execute_reply": "2024-08-21T21:56:22.803231Z"
    },
    "papermill": {
     "duration": 0.907656,
     "end_time": "2024-08-21T21:56:22.806194",
     "exception": false,
     "start_time": "2024-08-21T21:56:21.898538",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Instantiate the RandomSearch tuner\n",
    "tuner = RandomSearch(\n",
    "    build_model,\n",
    "    objective='val_accuracy',\n",
    "    max_trials=20,  # Number of different models to try\n",
    "    executions_per_trial=4,  # Number of times to train each model\n",
    "    directory='my_dir',\n",
    "    project_name='lstm_hyperparameter_tuning'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "ec56a367",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:56:22.954668Z",
     "iopub.status.busy": "2024-08-21T21:56:22.954348Z",
     "iopub.status.idle": "2024-08-21T21:56:22.959638Z",
     "shell.execute_reply": "2024-08-21T21:56:22.958794Z"
    },
    "papermill": {
     "duration": 0.081452,
     "end_time": "2024-08-21T21:56:22.961960",
     "exception": false,
     "start_time": "2024-08-21T21:56:22.880508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Search space summary\n",
      "Default search space size: 8\n",
      "spatial_dropout (Float)\n",
      "{'default': 0.1, 'conditions': [], 'min_value': 0.1, 'max_value': 0.5, 'step': 0.1, 'sampling': 'linear'}\n",
      "lstm_units_1 (Int)\n",
      "{'default': None, 'conditions': [], 'min_value': 64, 'max_value': 128, 'step': 32, 'sampling': 'linear'}\n",
      "lstm_units_2 (Int)\n",
      "{'default': None, 'conditions': [], 'min_value': 32, 'max_value': 64, 'step': 32, 'sampling': 'linear'}\n",
      "dropout (Float)\n",
      "{'default': 0.2, 'conditions': [], 'min_value': 0.2, 'max_value': 0.5, 'step': 0.1, 'sampling': 'linear'}\n",
      "recurrent_dropout (Float)\n",
      "{'default': 0.2, 'conditions': [], 'min_value': 0.2, 'max_value': 0.5, 'step': 0.1, 'sampling': 'linear'}\n",
      "dense_units (Int)\n",
      "{'default': None, 'conditions': [], 'min_value': 32, 'max_value': 64, 'step': 16, 'sampling': 'linear'}\n",
      "dropout_dense (Float)\n",
      "{'default': 0.2, 'conditions': [], 'min_value': 0.2, 'max_value': 0.5, 'step': 0.1, 'sampling': 'linear'}\n",
      "learning_rate (Float)\n",
      "{'default': 0.0001, 'conditions': [], 'min_value': 0.0001, 'max_value': 0.01, 'step': None, 'sampling': 'log'}\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Display search space summary\n",
    "tuner.search_space_summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "2d0eaf44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:56:23.110309Z",
     "iopub.status.busy": "2024-08-21T21:56:23.110024Z",
     "iopub.status.idle": "2024-08-21T21:56:23.113926Z",
     "shell.execute_reply": "2024-08-21T21:56:23.113055Z"
    },
    "papermill": {
     "duration": 0.080247,
     "end_time": "2024-08-21T21:56:23.115973",
     "exception": false,
     "start_time": "2024-08-21T21:56:23.035726",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# batch_size = 32\n",
    "# model.fit(X_train, Y_train, epochs = 20, batch_size=batch_size, verbose = 2)\n",
    "\n",
    "# Training\n",
    "# history = model.fit(X_train, Y_train,\n",
    "#                     epochs=epochs,\n",
    "#                     batch_size=batch_size,\n",
    "#                     validation_data=(X_test, Y_test),\n",
    "#                     verbose=2,\n",
    "#                     callbacks=[early_stopping, reduce_lr, model_checkpoint])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a392e496",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T21:56:23.261843Z",
     "iopub.status.busy": "2024-08-21T21:56:23.261595Z",
     "iopub.status.idle": "2024-08-21T22:33:34.623826Z",
     "shell.execute_reply": "2024-08-21T22:33:34.622838Z"
    },
    "papermill": {
     "duration": 2231.511062,
     "end_time": "2024-08-21T22:33:34.699180",
     "exception": false,
     "start_time": "2024-08-21T21:56:23.188118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Trial 20 Complete [00h 03m 11s]\n",
      "val_accuracy: 0.7937062978744507\n",
      "\n",
      "Best val_accuracy So Far: 0.8076923191547394\n",
      "Total elapsed time: 00h 37m 11s\n"
     ]
    }
   ],
   "source": [
    "# Perform hyperparameter tuning\n",
    "tuner.search(X_train, Y_train, \n",
    "             epochs=20, \n",
    "             validation_data=(X_test, Y_test), \n",
    "             batch_size=64, \n",
    "             callbacks=[tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3)])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "1bef0327",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T22:33:34.870351Z",
     "iopub.status.busy": "2024-08-21T22:33:34.869973Z",
     "iopub.status.idle": "2024-08-21T22:33:34.876990Z",
     "shell.execute_reply": "2024-08-21T22:33:34.876059Z"
    },
    "papermill": {
     "duration": 0.08761,
     "end_time": "2024-08-21T22:33:34.879109",
     "exception": false,
     "start_time": "2024-08-21T22:33:34.791499",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "The hyperparameter search is complete. \n",
      "Optimal SpatialDropout1D rate: 0.5\n",
      "Optimal LSTM units for first layer: 96\n",
      "Optimal LSTM units for second layer: 64\n",
      "Optimal dropout rate for second LSTM layer: 0.2\n",
      "Optimal recurrent dropout rate for second LSTM layer: 0.30000000000000004\n",
      "Optimal dense layer units: 32\n",
      "Optimal dropout rate for dense layer: 0.4\n",
      "Optimal learning rate: 0.002007431323449956\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Display best hyperparameters\n",
    "best_hps = tuner.get_best_hyperparameters(num_trials=1)[0]\n",
    "print(f\"\"\"\n",
    "The hyperparameter search is complete. \n",
    "Optimal SpatialDropout1D rate: {best_hps.get('spatial_dropout')}\n",
    "Optimal LSTM units for first layer: {best_hps.get('lstm_units_1')}\n",
    "Optimal LSTM units for second layer: {best_hps.get('lstm_units_2')}\n",
    "Optimal dropout rate for second LSTM layer: {best_hps.get('dropout')}\n",
    "Optimal recurrent dropout rate for second LSTM layer: {best_hps.get('recurrent_dropout')}\n",
    "Optimal dense layer units: {best_hps.get('dense_units')}\n",
    "Optimal dropout rate for dense layer: {best_hps.get('dropout_dense')}\n",
    "Optimal learning rate: {best_hps.get('learning_rate')}\n",
    "\"\"\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c5676e52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T22:33:35.037137Z",
     "iopub.status.busy": "2024-08-21T22:33:35.036229Z",
     "iopub.status.idle": "2024-08-21T22:33:35.040974Z",
     "shell.execute_reply": "2024-08-21T22:33:35.040014Z"
    },
    "papermill": {
     "duration": 0.085896,
     "end_time": "2024-08-21T22:33:35.042938",
     "exception": false,
     "start_time": "2024-08-21T22:33:34.957042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Display best hyperparameters\n",
    "# best_hps = tuner.get_best_hyperparameters(num_trials=1)[0]\n",
    "# print(f\"\"\"\n",
    "# The hyperparameter search is complete. \n",
    "# Optimal dropout rate: {best_hps.get('dropout_rate')}\n",
    "# Optimal LSTM units: {best_hps.get('lstm_units')}\n",
    "# Optimal dense layer units: {best_hps.get('dense_units')}\n",
    "# Optimal optimizer: {best_hps.get('optimizer')}\n",
    "# \"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "43b3f553",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T22:33:35.202915Z",
     "iopub.status.busy": "2024-08-21T22:33:35.202538Z",
     "iopub.status.idle": "2024-08-21T22:34:05.966062Z",
     "shell.execute_reply": "2024-08-21T22:34:05.965232Z"
    },
    "papermill": {
     "duration": 30.844165,
     "end_time": "2024-08-21T22:34:05.968045",
     "exception": false,
     "start_time": "2024-08-21T22:33:35.123880",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 64ms/step - accuracy: 0.5378 - loss: 1.0374 - val_accuracy: 0.6014 - val_loss: 0.8351\n",
      "Epoch 2/20\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 49ms/step - accuracy: 0.6110 - loss: 0.7979 - val_accuracy: 0.7063 - val_loss: 0.6762\n",
      "Epoch 3/20\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 51ms/step - accuracy: 0.6739 - loss: 0.6753 - val_accuracy: 0.7343 - val_loss: 0.5726\n",
      "Epoch 4/20\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 49ms/step - accuracy: 0.7397 - loss: 0.5602 - val_accuracy: 0.7483 - val_loss: 0.5586\n",
      "Epoch 5/20\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 49ms/step - accuracy: 0.7946 - loss: 0.4790 - val_accuracy: 0.7413 - val_loss: 0.5346\n",
      "Epoch 6/20\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 49ms/step - accuracy: 0.8182 - loss: 0.4362 - val_accuracy: 0.7622 - val_loss: 0.5040\n",
      "Epoch 7/20\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 57ms/step - accuracy: 0.8422 - loss: 0.3903 - val_accuracy: 0.7692 - val_loss: 0.4776\n",
      "Epoch 8/20\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 50ms/step - accuracy: 0.8661 - loss: 0.3544 - val_accuracy: 0.7762 - val_loss: 0.5479\n",
      "Epoch 9/20\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 51ms/step - accuracy: 0.8665 - loss: 0.3155 - val_accuracy: 0.7762 - val_loss: 0.4735\n",
      "Epoch 10/20\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 50ms/step - accuracy: 0.8882 - loss: 0.2923 - val_accuracy: 0.7902 - val_loss: 0.5600\n",
      "Epoch 11/20\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 50ms/step - accuracy: 0.8886 - loss: 0.2836 - val_accuracy: 0.7902 - val_loss: 0.5655\n",
      "Epoch 12/20\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 51ms/step - accuracy: 0.9043 - loss: 0.2705 - val_accuracy: 0.7902 - val_loss: 0.5809\n"
     ]
    }
   ],
   "source": [
    "# Build the model with the best hyperparameters\n",
    "model = tuner.hypermodel.build(best_hps)\n",
    "\n",
    "# Train the final model\n",
    "history = model.fit(X_train, Y_train, \n",
    "                    epochs=20, \n",
    "                    validation_data=(X_test, Y_test), \n",
    "                    batch_size=64, \n",
    "                    callbacks=[tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "93f3c719",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T22:34:06.184694Z",
     "iopub.status.busy": "2024-08-21T22:34:06.184276Z",
     "iopub.status.idle": "2024-08-21T22:34:06.340865Z",
     "shell.execute_reply": "2024-08-21T22:34:06.339732Z"
    },
    "papermill": {
     "duration": 0.269171,
     "end_time": "2024-08-21T22:34:06.343099",
     "exception": false,
     "start_time": "2024-08-21T22:34:06.073928",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - accuracy: 0.8016 - loss: 0.5741\n",
      "Test accuracy: 0.7902\n"
     ]
    }
   ],
   "source": [
    "# Evaluate the model\n",
    "test_loss, test_acc = model.evaluate(X_test, Y_test)\n",
    "print(f\"Test accuracy: {test_acc:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "32c24e64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T22:34:06.553169Z",
     "iopub.status.busy": "2024-08-21T22:34:06.552792Z",
     "iopub.status.idle": "2024-08-21T22:34:06.675722Z",
     "shell.execute_reply": "2024-08-21T22:34:06.674669Z"
    },
    "papermill": {
     "duration": 0.23047,
     "end_time": "2024-08-21T22:34:06.677817",
     "exception": false,
     "start_time": "2024-08-21T22:34:06.447347",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3/3 - 0s - 22ms/step - accuracy: 0.7902 - loss: 0.5809\n",
      "loss_score: 0.58\n",
      "accuracy: 0.79\n"
     ]
    }
   ],
   "source": [
    "score,acc = model.evaluate(X_test, Y_test,verbose = 2, batch_size = batch_size)\n",
    "print(\"loss_score: %.2f\" % (score))\n",
    "print(\"accuracy: %.2f\" % (acc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "73bd1c8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T22:34:06.892328Z",
     "iopub.status.busy": "2024-08-21T22:34:06.891910Z",
     "iopub.status.idle": "2024-08-21T22:34:39.713290Z",
     "shell.execute_reply": "2024-08-21T22:34:39.712129Z"
    },
    "papermill": {
     "duration": 32.932006,
     "end_time": "2024-08-21T22:34:39.715566",
     "exception": false,
     "start_time": "2024-08-21T22:34:06.783560",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 - 0s - 380ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 31ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 40ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 22ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 40ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 49ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 33ms/step\n",
      "1/1 - 0s - 34ms/step\n",
      "1/1 - 0s - 38ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 38ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 32ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 21ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 22ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 22ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 22ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 22ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 22ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 33ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 33ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 30ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 32ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 23ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 28ms/step\n",
      "1/1 - 0s - 29ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 27ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 24ms/step\n",
      "1/1 - 0s - 26ms/step\n",
      "1/1 - 0s - 25ms/step\n",
      "pos_acc 80.97014925373134 %\n",
      "neg_acc 86.20689655172413 %\n"
     ]
    }
   ],
   "source": [
    "pos_cnt, neg_cnt, pos_correct, neg_correct = 0, 0, 0, 0\n",
    "for x in range(len(X_validate)):\n",
    "    \n",
    "    result = model.predict(X_validate[x].reshape(1,X_test.shape[1]),batch_size=1,verbose = 2)[0]\n",
    "   \n",
    "    if np.argmax(result) == np.argmax(Y_validate[x]):\n",
    "        if np.argmax(Y_validate[x]) == 0:\n",
    "            neg_correct += 1\n",
    "        else:\n",
    "            pos_correct += 1\n",
    "       \n",
    "    if np.argmax(Y_validate[x]) == 0:\n",
    "        neg_cnt += 1\n",
    "    else:\n",
    "        pos_cnt += 1\n",
    "\n",
    "\n",
    "\n",
    "print(\"pos_acc\", pos_correct/pos_cnt*100, \"%\")\n",
    "print(\"neg_acc\", neg_correct/neg_cnt*100, \"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "d01fe9cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T22:34:40.009001Z",
     "iopub.status.busy": "2024-08-21T22:34:40.008025Z",
     "iopub.status.idle": "2024-08-21T22:34:40.428885Z",
     "shell.execute_reply": "2024-08-21T22:34:40.427872Z"
    },
    "papermill": {
     "duration": 0.563094,
     "end_time": "2024-08-21T22:34:40.430909",
     "exception": false,
     "start_time": "2024-08-21T22:34:39.867815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[   0    0    0    0    0    0    0    1   79  477    7   18  559 1000\n",
      "    39  275   55    7   10 1913    6    5  458  165  118   13    4 1562]]\n",
      "1/1 - 0s - 368ms/step\n",
      "negative\n"
     ]
    }
   ],
   "source": [
    "twt = ['I been told you that yo folks dont care about you . Im starving and my dad deadass didnt make me a plate']\n",
    "twt = tokenizer.texts_to_sequences(twt)\n",
    "twt = pad_sequences(twt, maxlen=28, dtype='int32', value=0)\n",
    "print(twt)\n",
    "sentiment = model.predict(twt,batch_size=1,verbose = 2)[0]\n",
    "if(np.argmax(sentiment) == 0):\n",
    "    print(\"negative\")\n",
    "elif (np.argmax(sentiment) == 1):\n",
    "    print(\"positive\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "8d159bb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T22:34:40.711795Z",
     "iopub.status.busy": "2024-08-21T22:34:40.711181Z",
     "iopub.status.idle": "2024-08-21T22:34:42.330065Z",
     "shell.execute_reply": "2024-08-21T22:34:42.329042Z"
    },
    "papermill": {
     "duration": 1.76208,
     "end_time": "2024-08-21T22:34:42.332485",
     "exception": false,
     "start_time": "2024-08-21T22:34:40.570405",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.save('lstm_model.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4cced47e",
   "metadata": {
    "papermill": {
     "duration": 0.138123,
     "end_time": "2024-08-21T22:34:42.660325",
     "exception": false,
     "start_time": "2024-08-21T22:34:42.522202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 5557640,
     "sourceId": 9193227,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30747,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2518.384117,
   "end_time": "2024-08-21T22:34:46.129523",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-21T21:52:47.745406",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
